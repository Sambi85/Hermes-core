{"ast":null,"code":"import consumer from \"./consumer\";\n\n// Fetch the conversation ID from the HTML element with data-conversation-id\nvar conversationId = document.getElementById(\"chat\").getAttribute(\"data-conversation-id\");\nvar chatChannel = consumer.subscriptions.create({\n  channel: \"ChatChannel\",\n  conversation_id: conversationId\n},\n// Pass conversation_id to the channel\n{\n  connected: function connected() {\n    console.log(\"Connected to the chat!\");\n  },\n  disconnected: function disconnected() {\n    console.log(\"Disconnected from chat.\");\n  },\n  received: function received(data) {\n    // Get the current user's username from the page (assuming it's available on the page)\n    var currentUser = document.getElementById('current_user').getAttribute('data-username');\n    var messagesDiv = document.getElementById(\"messages\");\n    var messageDiv = document.createElement(\"div\");\n    messageDiv.classList.add(\"message\");\n\n    // Check if the message is from the current user or a recipient\n    var messageClass = data.user === currentUser ? 'sender' : 'recipient';\n    messageDiv.classList.add(messageClass);\n\n    // Create message elements\n    var usernameDiv = document.createElement(\"span\");\n    usernameDiv.classList.add(\"username\");\n    usernameDiv.innerText = data.user;\n    var messageTextDiv = document.createElement(\"span\");\n    messageTextDiv.classList.add(\"message-text\");\n    messageTextDiv.innerText = data.message;\n\n    // Append the username and message text to the message div\n    messageDiv.appendChild(usernameDiv);\n    messageDiv.appendChild(messageTextDiv);\n\n    // Add the message div to the messages container\n    messagesDiv.appendChild(messageDiv);\n\n    // Scroll to the bottom of the messages container\n    messagesDiv.scrollTop = messagesDiv.scrollHeight;\n  },\n  sendMessage: function sendMessage(message) {\n    // Send the message to the server via WebSocket\n    this.perform(\"send_message\", {\n      message: message\n    });\n  }\n});\n\n// Event listener to handle message sending\ndocument.getElementById(\"send_button\").addEventListener(\"click\", function () {\n  var messageInput = document.getElementById(\"message_input\");\n  var message = messageInput.value.trim(); // Ensure no empty messages are sent\n\n  if (message) {\n    chatChannel.sendMessage(message); // Send the message via WebSocket\n    messageInput.value = ''; // Clear input field after sending\n  } else {\n    console.log(\"Message cannot be empty\");\n  }\n});\n\n// Optional: Allow pressing 'Enter' to send the message\ndocument.getElementById(\"message_input\").addEventListener(\"keypress\", function (event) {\n  if (event.key === \"Enter\") {\n    document.getElementById(\"send_button\").click();\n  }\n});","map":{"version":3,"names":["consumer","conversationId","document","getElementById","getAttribute","chatChannel","subscriptions","create","channel","conversation_id","connected","console","log","disconnected","received","data","currentUser","messagesDiv","messageDiv","createElement","classList","add","messageClass","user","usernameDiv","innerText","messageTextDiv","message","appendChild","scrollTop","scrollHeight","sendMessage","perform","addEventListener","messageInput","value","trim","event","key","click"],"sources":["/home/sambi85/Projects/hermes/app/javascript/channels/chat_channel.js"],"sourcesContent":["import consumer from \"./consumer\";\n\n// Fetch the conversation ID from the HTML element with data-conversation-id\nconst conversationId = document.getElementById(\"chat\").getAttribute(\"data-conversation-id\");\n\nconst chatChannel = consumer.subscriptions.create(\n  { channel: \"ChatChannel\", conversation_id: conversationId }, // Pass conversation_id to the channel\n  {\n    connected() {\n      console.log(\"Connected to the chat!\");\n    },\n\n    disconnected() {\n      console.log(\"Disconnected from chat.\");\n    },\n\n    received(data) {\n      // Get the current user's username from the page (assuming it's available on the page)\n      const currentUser = document.getElementById('current_user').getAttribute('data-username');\n      const messagesDiv = document.getElementById(\"messages\");\n\n      const messageDiv = document.createElement(\"div\");\n      messageDiv.classList.add(\"message\");\n\n      // Check if the message is from the current user or a recipient\n      const messageClass = data.user === currentUser ? 'sender' : 'recipient';\n\n      messageDiv.classList.add(messageClass);\n\n      // Create message elements\n      const usernameDiv = document.createElement(\"span\");\n      usernameDiv.classList.add(\"username\");\n      usernameDiv.innerText = data.user;\n\n      const messageTextDiv = document.createElement(\"span\");\n      messageTextDiv.classList.add(\"message-text\");\n      messageTextDiv.innerText = data.message;\n\n      // Append the username and message text to the message div\n      messageDiv.appendChild(usernameDiv);\n      messageDiv.appendChild(messageTextDiv);\n\n      // Add the message div to the messages container\n      messagesDiv.appendChild(messageDiv);\n\n      // Scroll to the bottom of the messages container\n      messagesDiv.scrollTop = messagesDiv.scrollHeight;\n    },\n\n    sendMessage(message) {\n      // Send the message to the server via WebSocket\n      this.perform(\"send_message\", { message: message });\n    }\n  }\n);\n\n// Event listener to handle message sending\ndocument.getElementById(\"send_button\").addEventListener(\"click\", function() {\n  const messageInput = document.getElementById(\"message_input\");\n  const message = messageInput.value.trim(); // Ensure no empty messages are sent\n  \n  if (message) {\n    chatChannel.sendMessage(message); // Send the message via WebSocket\n    messageInput.value = ''; // Clear input field after sending\n  } else {\n    console.log(\"Message cannot be empty\");\n  }\n});\n\n// Optional: Allow pressing 'Enter' to send the message\ndocument.getElementById(\"message_input\").addEventListener(\"keypress\", function(event) {\n  if (event.key === \"Enter\") {\n    document.getElementById(\"send_button\").click();\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}