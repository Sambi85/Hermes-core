{"ast":null,"code":"import consumer from \"./consumer\";\n\n// Fetch the conversation ID from the HTML element with data-conversation-id\nvar conversationId = document.getElementById(\"chat\").getAttribute(\"data-conversation-id\");\nvar chatChannel = consumer.subscriptions.create({\n  channel: \"ChatChannel\",\n  conversation_id: conversationId\n},\n// Pass conversation_id to the channel\n{\n  connected: function connected() {\n    console.log(\"Connected to the chat!\");\n  },\n  disconnected: function disconnected() {\n    console.log(\"Disconnected from chat.\");\n  },\n  received: function received(data) {\n    // Add the received message to the chat window\n    var messagesDiv = document.getElementById(\"messages\");\n    var messageDiv = document.createElement(\"div\");\n    // Use the 'body' of the message instead of 'content'\n    messageDiv.innerHTML = \"<strong>\".concat(data.user, \":</strong> \").concat(data.message);\n    messagesDiv.appendChild(messageDiv);\n\n    // Scroll to the bottom of the messages container\n    messagesDiv.scrollTop = messagesDiv.scrollHeight;\n  },\n  sendMessage: function sendMessage(message) {\n    // Send the message to the server via WebSocket\n    this.perform(\"send_message\", {\n      message: message\n    });\n  }\n});\n\n// Event listener to handle message sending\ndocument.getElementById(\"send_button\").addEventListener(\"click\", function () {\n  var messageInput = document.getElementById(\"message_input\");\n  var message = messageInput.value.trim(); // Ensure no empty messages are sent\n\n  if (message) {\n    chatChannel.sendMessage(message); // Send the message via WebSocket\n    messageInput.value = ''; // Clear input field after sending\n  } else {\n    console.log(\"Message cannot be empty\");\n  }\n});\n\n// Optional: Allow pressing 'Enter' to send the message\ndocument.getElementById(\"message_input\").addEventListener(\"keypress\", function (event) {\n  if (event.key === \"Enter\") {\n    document.getElementById(\"send_button\").click();\n  }\n});","map":{"version":3,"names":["consumer","conversationId","document","getElementById","getAttribute","chatChannel","subscriptions","create","channel","conversation_id","connected","console","log","disconnected","received","data","messagesDiv","messageDiv","createElement","innerHTML","concat","user","message","appendChild","scrollTop","scrollHeight","sendMessage","perform","addEventListener","messageInput","value","trim","event","key","click"],"sources":["/home/sambi85/Projects/hermes/app/javascript/channels/chat_channel.js"],"sourcesContent":["import consumer from \"./consumer\";\n\n// Fetch the conversation ID from the HTML element with data-conversation-id\nconst conversationId = document.getElementById(\"chat\").getAttribute(\"data-conversation-id\");\n\nconst chatChannel = consumer.subscriptions.create(\n  { channel: \"ChatChannel\", conversation_id: conversationId }, // Pass conversation_id to the channel\n  {\n    connected() {\n      console.log(\"Connected to the chat!\");\n    },\n\n    disconnected() {\n      console.log(\"Disconnected from chat.\");\n    },\n\n    received(data) {\n      // Add the received message to the chat window\n      const messagesDiv = document.getElementById(\"messages\");\n      const messageDiv = document.createElement(\"div\");\n      // Use the 'body' of the message instead of 'content'\n      messageDiv.innerHTML = `<strong>${data.user}:</strong> ${data.message}`;\n      messagesDiv.appendChild(messageDiv);\n\n      // Scroll to the bottom of the messages container\n      messagesDiv.scrollTop = messagesDiv.scrollHeight;\n    },\n\n    sendMessage(message) {\n      // Send the message to the server via WebSocket\n      this.perform(\"send_message\", { message: message });\n    }\n  }\n);\n\n// Event listener to handle message sending\ndocument.getElementById(\"send_button\").addEventListener(\"click\", function() {\n  const messageInput = document.getElementById(\"message_input\");\n  const message = messageInput.value.trim(); // Ensure no empty messages are sent\n  \n  if (message) {\n    chatChannel.sendMessage(message); // Send the message via WebSocket\n    messageInput.value = ''; // Clear input field after sending\n  } else {\n    console.log(\"Message cannot be empty\");\n  }\n});\n\n// Optional: Allow pressing 'Enter' to send the message\ndocument.getElementById(\"message_input\").addEventListener(\"keypress\", function(event) {\n  if (event.key === \"Enter\") {\n    document.getElementById(\"send_button\").click();\n  }\n});\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;;AAEjC;AACA,IAAMC,cAAc,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAACC,YAAY,CAAC,sBAAsB,CAAC;AAE3F,IAAMC,WAAW,GAAGL,QAAQ,CAACM,aAAa,CAACC,MAAM,CAC/C;EAAEC,OAAO,EAAE,aAAa;EAAEC,eAAe,EAAER;AAAe,CAAC;AAAE;AAC7D;EACES,SAAS,WAATA,SAASA,CAAA,EAAG;IACVC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC,CAAC;EAEDC,YAAY,WAAZA,YAAYA,CAAA,EAAG;IACbF,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACxC,CAAC;EAEDE,QAAQ,WAARA,QAAQA,CAACC,IAAI,EAAE;IACb;IACA,IAAMC,WAAW,GAAGd,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC;IACvD,IAAMc,UAAU,GAAGf,QAAQ,CAACgB,aAAa,CAAC,KAAK,CAAC;IAChD;IACAD,UAAU,CAACE,SAAS,cAAAC,MAAA,CAAcL,IAAI,CAACM,IAAI,iBAAAD,MAAA,CAAcL,IAAI,CAACO,OAAO,CAAE;IACvEN,WAAW,CAACO,WAAW,CAACN,UAAU,CAAC;;IAEnC;IACAD,WAAW,CAACQ,SAAS,GAAGR,WAAW,CAACS,YAAY;EAClD,CAAC;EAEDC,WAAW,WAAXA,WAAWA,CAACJ,OAAO,EAAE;IACnB;IACA,IAAI,CAACK,OAAO,CAAC,cAAc,EAAE;MAAEL,OAAO,EAAEA;IAAQ,CAAC,CAAC;EACpD;AACF,CACF,CAAC;;AAED;AACApB,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAACyB,gBAAgB,CAAC,OAAO,EAAE,YAAW;EAC1E,IAAMC,YAAY,GAAG3B,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC;EAC7D,IAAMmB,OAAO,GAAGO,YAAY,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;;EAE3C,IAAIT,OAAO,EAAE;IACXjB,WAAW,CAACqB,WAAW,CAACJ,OAAO,CAAC,CAAC,CAAC;IAClCO,YAAY,CAACC,KAAK,GAAG,EAAE,CAAC,CAAC;EAC3B,CAAC,MAAM;IACLnB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACxC;AACF,CAAC,CAAC;;AAEF;AACAV,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC,CAACyB,gBAAgB,CAAC,UAAU,EAAE,UAASI,KAAK,EAAE;EACpF,IAAIA,KAAK,CAACC,GAAG,KAAK,OAAO,EAAE;IACzB/B,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAAC+B,KAAK,CAAC,CAAC;EAChD;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}